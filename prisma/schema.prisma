datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model ProfileImage {
  id        Int @id @default(autoincrement())
  profileId Int
  position  Int @default(0)

  // Medium quality version (default)
  mediumUrl        String
  mediumCdnUrl     String?
  mediumStorageKey String

  // Thumbnail version
  thumbnailUrl        String?
  thumbnailCdnUrl     String?
  thumbnailStorageKey String?

  // High quality version
  highQualityUrl        String?
  highQualityCdnUrl     String?
  highQualityStorageKey String?

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

// Update the Profile model
model Profile {
  id             Int                    @id @default(autoincrement())
  userId         String                 @unique
  name           String
  price          Float
  age            Int
  description    String
  latitude       Float
  longitude      Float
  address        String
  updatedAt      DateTime               @updatedAt
  createdAt      DateTime               @default(now())
  paymentMethods ProfilePaymentMethod[]
  languages      ProfileLanguage[]
  images         ProfileImage[]
  user           User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PaymentMethod {
  id       Int                    @id @default(autoincrement())
  name     String                 @unique
  profiles ProfilePaymentMethod[]
}

model Language {
  id       Int               @id @default(autoincrement())
  name     String            @unique
  profiles ProfileLanguage[]
}

model ProfilePaymentMethod {
  profile         Profile       @relation(fields: [profileId], references: [id])
  profileId       Int
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId Int

  @@id([profileId, paymentMethodId])
}

model ProfileLanguage {
  profile    Profile  @relation(fields: [profileId], references: [id])
  profileId  Int
  language   Language @relation(fields: [languageId], references: [id])
  languageId Int

  @@id([profileId, languageId])
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  role          String          @default("user")
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profile   Profile?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
