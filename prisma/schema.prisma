generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// NextAuth Models with exact field names from documentation
model users {
  id            Int        @id @default(autoincrement())
  name          String?    @db.VarChar(255)
  email         String?    @db.VarChar(255)
  emailVerified DateTime?  @map("emailVerified") @db.Timestamptz
  image         String?    @db.Text
  accounts      accounts[]
  sessions      sessions[]
  profile       Profile?
}

model accounts {
  id                Int     @id @default(autoincrement())
  userId            Int     @map("userId")
  type              String  @db.VarChar(255)
  provider          String  @db.VarChar(255)
  providerAccountId String  @map("providerAccountId") @db.VarChar(255)
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        BigInt?
  id_token          String? @db.Text
  scope             String?
  session_state     String?
  token_type        String?

  user users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model sessions {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("userId")
  expires      DateTime @db.Timestamptz
  sessionToken String   @map("sessionToken") @db.VarChar(255)
  user         users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model verification_token {
  identifier String   @db.Text
  expires    DateTime @db.Timestamptz
  token      String   @db.Text

  @@id([identifier, token])
}

// Your existing models
model Profile {
  id             Int                    @id @default(autoincrement())
  userId         Int                    @unique
  name           String
  price          Float
  age            Int
  image          String?
  description    String
  latitude       Float
  longitude      Float
  address        String
  updatedAt      DateTime               @updatedAt
  createdAt      DateTime               @default(now())
  paymentMethods ProfilePaymentMethod[]
  languages      ProfileLanguage[]
  user           users                  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PaymentMethod {
  id       Int                    @id @default(autoincrement())
  name     String                 @unique
  profiles ProfilePaymentMethod[]
}

model Language {
  id       Int               @id @default(autoincrement())
  name     String            @unique
  profiles ProfileLanguage[]
}

model ProfilePaymentMethod {
  profile         Profile       @relation(fields: [profileId], references: [id])
  profileId       Int
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId Int

  @@id([profileId, paymentMethodId])
}

model ProfileLanguage {
  profile    Profile  @relation(fields: [profileId], references: [id])
  profileId  Int
  language   Language @relation(fields: [languageId], references: [id])
  languageId Int

  @@id([profileId, languageId])
}
